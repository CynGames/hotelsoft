name: CI/CD Pipeline

on:
  push:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: 123456
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      PRISMA_BINARY_TARGETS: ${{ secrets.PRISMA_BINARY_TARGETS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Print
        run: echo $DATABASE_URL

      - name: Run migration in db
        run: DEBUG="*" npx prisma db push

      - name: Run tests
        run: npm run test

#      - name: Generate Prisma Client
#        run: npx prisma migrate dev
#        env:
#          PRISMA_BINARY_TARGETS: ${{ secrets.PRISMA_BINARY_TARGETS }}}

#
#  build_and_push_docker:
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v2
#
#    - name: Login to DockerHub
#      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#
#    - name: Build and Push Docker image
#      run: |
#        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hotelsoft .
#        docker push ${{ secrets.DOCKERHUB_USERNAME }}/hotelsoft


#jobs:
#  test:
#    runs-on: ubuntu-latest
#    # Service containers to run with `container-job`
#    services:
#      # Label used to access the service container
#      postgres:
#        # Docker Hub image
#        image: postgres
#        # Provide the password for postgres
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          # Maps TCP port 5432 on service container to the host
#          - 5432:5432
#    env:
#      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/grading-app
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v1
#        with:
#          node-version: '12.x'
#      - run: npm ci
#      # run the migration in the test database
#      - run: npm run db:push
#      - run: npm run test
#  deploy:
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Only deploy master
#    needs: test
#    steps:
#      - uses: actions/checkout@v2
#      - run: npm ci
#      - name: Run production migration
#        run: npm run migrate:deploy
#        env:
#          DATABASE_URL: ${{ secrets.DATABASE_URL }}
#      - uses: akhileshns/heroku-deploy@v3.4.6
#        with:
#          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
#          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
#          heroku_email: ${{ secrets.HEROKU_EMAIL }}

#name: CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - master
#  pull_request:
#    branches:
#      - master
#
#jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version: 14
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Run ESLint
#        run: npx eslint .
#
#  test:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:13
#        env:
#          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
#        ports:
#          - 5432:5432
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version: 14
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Install Jest and ts-jest locally
#        run: npm install jest ts-jest
#
#      - name: Wait for PostgreSQL to start
#        run: sleep 10
#
#      - name: Run __tests__
#        run: npm test -- --no-cache
#        env:
#          DATABASE_URL: ${{ secrets.DATABASE_URL }}
#          JWT_SECRET: ${{ secrets.JWT_SECRET }}
